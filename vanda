#!/bin/bash

#----------------------- configuration

rc_file="$HOME/.vandarc"

# set here
vjobdir="vanda"
vandaversion="0.05"

# options
verbose=0

#----------------------- cli arguments

#----------------------- config file

function create_rc_file {
	cat <<-ENDRC > "$rc_file"
		vhost="vanda_compute_node"
		vmountpoint="vanda_local_mountpoint"
	ENDRC
}

if [ -f "$rc_file" ]; then
	# shellcheck source=.vandarc
	source "$rc_file"
else
	echo "No vandarc found. Creating."
	create_rc_file
fi

#----------------------- helpers

askN() {
	read -r -p"$1 [y|N] " response < /dev/stdin
	if [ "$response" == "y" ] || [ "$response" == "Y" ]; then
		return 1
	fi
	return 0
}

warn() {
	echo "$1"
}

verbose() {
	[ "$verbose" -ge 1 ] && echo "$1"
}

error() {
	echo "$1"
}

#----------------------- commands

cmd_run() {
	# check git clean
	if [ -n "$(git status --untracked-files=no --porcelain)" ]; then
		warn "git is not clean."
		askN "Proceed nevertheless?" && exit 1
	fi

	if [ "$(git rev-list HEAD...origin/master --count)" -ge 1 ]; then
		warn "git possibly not sufficiently up to date. Did you push?"
		askN "Do you want to continue?" && exit 1
	fi

	# extract git remote
	git_remote="$(git config --get remote.origin.url)"
	git_hash_full="$(sha512sum <<< "$git_remote" )"
	git_hash="${git_hash_full::6}"
	git_toplevel="$(git rev-parse --show-toplevel)"

	wrelpath="${PWD#$git_toplevel}"

	wdirdate="$(date '+%Y%m%d_%H%M%S')"
	wdir="${git_hash}_$wdirdate"

	linkdest="vj$wdirdate"

	# ssh to job node
	# shellcheck disable=SC2087
	ssh -T "$vhost" <<-ENDSSH
		set -x
		if [ ! -d "$vjobdir" ]; then
			echo "vanda job dir '$vjobdir' not found. Aborting." >&2
			exit 1
		fi
		cd "$vjobdir"
		git clone "$git_remote" "$wdir"
		ln -s "${wrelpath#/}" "${wdir}/vanda_pwd"
		cd "$wdir$wrelpath"
		cat <<-ENDVLOG > vanda_job.log
			date \$(date)
			isodate \$(date '+%Y-%m-%dT%h%m%s')
			git_ref \$(git rev-parse --verify HEAD)
			git_log \$(git log -1 --pretty=oneline)
			vanda_relpath $wrelpath
			vanda_linkdest $linkdest
			vanda_version $vandaversion
		ENDVLOG
		#tmux new-session -d bash -c './vanda_job.sh 1>vanda_job.o 2>vanda_job.e'
		screen -dmS vanda_job_$wdir -- bash -c './vanda_job.sh \
		  > >(tee -a vanda_job.o) 2> >(tee -a vanda_job.e >&2) ; \
		  echo -e "date_end \$(date)\nisodate_end \$(date '+%Y-%m-%dT%h%m%s')" >>vanda_job.log'
	ENDSSH

	# link results here
	ln -s "$vmountpoint/$vjobdir/$wdir$wrelpath" "$linkdest"
	echo "Results will be found in '$linkdest'."

	echo "R $(date '+%Y-%m-%dT%h%m%s') vanda_job_$wdir $vhost" >> .vandajobs
}

cmd_attach() {
	jobdata_str=$(tail -n1 .vandajobs)
	IFS=' ' read -r -a jobdata <<< "$jobdata_str"
	vhost=${jobdata[3]}
	vsession=${jobdata[2]}

	# shellcheck disable=SC2029
	ssh "$vhost" -t -- screen -rx "$vsession"
}

cmd_kill() {
	jobdata_str=$(tail -n1 .vandajobs)
	IFS=' ' read -r -a jobdata <<< "$jobdata_str"
	vhost=${jobdata[3]}
	vsession=${jobdata[2]}

	# shellcheck disable=SC2029
	ssh "$vhost" -t -- screen -X -S "$vsession" quit
}

cmd_info() {
	jobdata_str=$(tail -n1 .vandajobs)
	IFS=' ' read -r -a jobdata <<< "$jobdata_str"
	vhost=${jobdata[3]}
	vsession=${jobdata[2]}
	vjdir="vj${vsession#vanda_job_*_}"

	if ssh "$vhost" -- screen -list | grep -q "$vsession" ; then
		echo "Job $vsession still running."
	else
		echo "Job $vsession has terminated."
	fi

	echo -e "\nJob log at $vjdir/vanda_job.log"
	sed 's/^/  /g' "$vjdir/vanda_job.log"
}

cmd_clean() {
	for dirlink in vj20*; do
		if [ -L "$dirlink" ] && ! [ -e "$dirlink" ]; then
			rm -- "$dirlink"
			verbose "Removing '$dirlink'."
		fi
	done
}

cmd_help() {
	cat <<-"ENDHELP"
	usage: vanda [-hv] [cmd [args]]

	options:
	  -h              print this help
	  -v              be verbose

	commands:
	  run             run vanda for the current git commit
      attach          attach to most recent job session
      kill            kill the most recent job session
      info            print information on the most recent session
	  clean           remove stale resource links
	  remove          remove the given resource and its link
	  gitignore       append vanda specifics to .gitignore

	  help            print this help
	  version         print the version information
	ENDHELP
}

cmd_version() {
	echo "vanda $vandaversion"
}

cmd_check() {
	# TODO
	# ssh works?
	# git?
	# tmux?
	# screen?
	true;
}

cmd_remove() {
	for dirlink in "$@" ; do
		if [ -L "$dirlink" ] && [ -e "$dirlink" ]; then
			dest="$(readlink "$dirlink")"
			if [ -d "$dest" ]; then
				verbose "Removing the resource '$dirlink'."
				rm -r -- "$dest"
				rm -- "$dirlink"
			else
				error "Failed to remove the resource '$dirlink'."
			fi
		else
			error "No valid resource '$dirlink'."
		fi
	done
}

cmd_gitignore() {
	cat <<-ENDGITIGNORE >> .gitignore
		.vandajobs
		vj20[0-9]*_[0-9]*
	ENDGITIGNORE
}

#----------------------- main

optspec=":hv:"
while getopts "$optspec" optchar; do
	case "${optchar}" in
		h)
			cmd_help
			exit 0
			;;
		v)
			verbose=1
			shift
			;;
		*)
			if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
				error "Unknown option '-${OPTARG}'"
				cmd_help
				exit 0
			fi
			;;
	esac
done

if declare -f "cmd_$1" >/dev/null; then
	func="cmd_$1"
	shift
	"$func" "$@"
elif [ -z "$1" ]; then
	echo "No command given. Assuming 'run'."
	cmd_run
else
	echo "Unknown command '$1'." >&2
	cmd_help
fi
